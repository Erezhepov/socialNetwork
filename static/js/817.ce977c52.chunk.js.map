{"version":3,"file":"static/js/817.ce977c52.chunk.js","mappings":"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","sources":["components/InputItem.tsx","webpack://practice/./src/pages/authPage/AuthPage.module.css?e2ee","pages/authPage/AuthPage.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\n\r\ninterface IInputItem {\r\n    type: string\r\n    placeholder: string\r\n    getValue: (value: string) => void\r\n    required: boolean\r\n}\r\n\r\nconst InputItem = (props: IInputItem) => {\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [value, setValue] = useState<string>('')\r\n    const changeValue = (e:  React.ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setValue(e.target.value)\r\n    }\r\n    const setChangedValue = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        if (e.target.value.trim().length === 0){\r\n            setError(true)\r\n        }\r\n        props.getValue(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input onBlur={setChangedValue} value={value} onChange={changeValue} placeholder={props.placeholder} type={props.type}/>\r\n            {props.required && error && <div className='error-text'>This field must be required</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputItem;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AuthPage_form__VZX2G\",\"btn\":\"AuthPage_btn__RO7HQ\",\"checkbox\":\"AuthPage_checkbox__+ZYpy\"};","import React, {useState} from 'react';\r\nimport s from './AuthPage.module.css'\r\nimport InputItem from \"../../components/InputItem\";\r\nimport {fetchPostAuth} from \"../../store/actionCreators/auth\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst AuthPage = () => {\r\n    const authState = useTypedSelector(state => state.auth)\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false)\r\n    const dispatch: Dispatch<any> = useDispatch()\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [isAuthMessage, setIsAuthMessage] = useState<boolean>(false)\r\n    const getEmail = (value: string) => setEmail(value)\r\n    const getPassword = (value: string) => setPassword(value)\r\n    const auth = (e:  React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        dispatch(fetchPostAuth({email, password, rememberMe}))\r\n        setIsAuthMessage(true)\r\n    }\r\n    const rememberFn = () => setRememberMe(!rememberMe)\r\n    if (authState.isAuth) return <div><h2>You have signed in</h2></div>\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>You can sign in with test email</h3>\r\n                <div>Email: free@samuraijs.com</div>\r\n                <div>Password: free</div>\r\n            </div>\r\n            <h2>Sign in:</h2>\r\n            {authState.error && <div className={'error-text'}>{authState.error}</div>}\r\n                <form onSubmit={auth} className={s.form} action=\"\">\r\n                    <InputItem required={true} getValue={getEmail} placeholder={'Email'} type={'email'}/>\r\n                    <InputItem required={true} getValue={getPassword} placeholder={'Password'} type={'password'}/>\r\n                    <div>\r\n                        <span>Remember me</span><input onClick={rememberFn} className={s.checkbox} type={'checkbox'} />\r\n                    </div>\r\n                    <button className={s.btn} >Sign in</button>\r\n                    {isAuthMessage && <div className='error-text'>{authState.message}</div>}\r\n                </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AuthPage;"],"names":["props","_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","_useState4","value","setValue","_jsxs","children","_jsx","onBlur","e","target","trim","length","getValue","onChange","placeholder","type","required","className","authState","useTypedSelector","state","auth","rememberMe","setRememberMe","dispatch","useDispatch","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","isAuthMessage","setIsAuthMessage","isAuth","onSubmit","preventDefault","fetchPostAuth","s","action","InputItem","onClick","message"],"sourceRoot":""}